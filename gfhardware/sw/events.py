"""
(C) Copyright 2020
Scott Wiederhold, s.e.wiederhold@gmail.com
https://community.openglow.org
SPDX-License-Identifier:    MIT

Based on python-evdev
Copyright (c) 2012-2016 Georgi Valkov. All rights reserved.

This module provides the :class:`InputEvent` class, which closely
resembles the ``input_event`` struct defined in ``linux/input.h``:

.. code-block:: c

    struct input_event {
        struct timeval time;
        __u16 type;
        __u16 code;
        __s32 value;
    };

This module also defines several :class:`InputEvent` sub-classes that
know more about the different types of events (key, abs, rel etc). The
:data:`event_factory` dictionary maps event types to these classes.

Assuming you use the :func:`evdev.util.categorize()` function to
categorize events according to their type, adding or replacing a class
for a specific event type becomes a matter of modifying
:data:`event_factory`.

All classes in this module have reasonable ``str()`` and ``repr()``
methods::

    >>> print(event)
    event at 1337197425.477827, code 04, type 04, val 458792
    >>> print(repr(event))
    InputEvent(1337197425L, 477827L, 4, 4, 458792L)

    >>> print(key_event)
    key event at 1337197425.477835, 28 (KEY_ENTER), up
    >>> print(repr(key_event))
    KeyEvent(InputEvent(1337197425L, 477835L, 1, 28, 0L))
"""
from gfhardware.sw import InputSwitch, EventCode, SynCode


class InputEvent(object):
    """
    A generic input event.
    """
    __slots__ = 'sec', 'usec', 'type', 'code', 'value'

    def __init__(self, sec, usec, type, code, value):
        self.sec = sec
        self.usec = usec
        self.type = type
        self.code = code
        self.value = value

    def timestamp(self):
        return self.sec + (self.usec / 1000000.0)

    def __str__(s):
        msg = 'event at {:f}, code {:02d}, type {:02d}, val {:02d}'
        return msg.format(s.timestamp(), s.code, s.type, s.value)

    def __repr__(s):
        msg = '{}({!r}, {!r}, {!r}, {!r}, {!r})'
        return msg.format(s.__class__.__name__,
                          s.sec, s.usec, s.type, s.code, s.value)


class SwitchEvent(object):
    """
    An event generated by a switch.
    """

    # key_up   = 0x0
    # key_down = 0x1
    # key_hold = 0x2

    __slots__ = 'scancode', 'swcode', 'swstate', 'event'

    def __init__(self, event, allow_unknown=False):
        """
        The ``allow_unknown`` argument determines what to do in the event of a event code
        for which a key code cannot be found. If ``False`` a ``KeyError`` will be raised.
        If ``True`` the keycode will be set to the hex value of the event code.
        """

        self.scancode = event.code

        # if event.value == 0:
        #     self.keystate = KeyEvent.key_up
        # elif event.value == 2:
        #     self.keystate = KeyEvent.key_hold
        # elif event.value == 1:
        #     self.keystate = KeyEvent.key_down
        #
        # try:
        #     self.keycode = keys[event.code]
        # except KeyError:
        #     if allow_unknown:
        #         self.keycode = '0x{:02X}'.format(event.code)
        #     else:
        #         raise

        #: Reference to an :class:`InputEvent` instance.
        self.event = event

    def __str__(self):
        try:
            ks = ('up', 'down', 'hold')[self.swstate]
        except IndexError:
            ks = 'unknown'

        msg = 'key event at {:f}, {} ({}), {}'
        return msg.format(self.event.timestamp(),
                          self.scancode, self.swcode, ks)

    def __repr__(self):
        return '{}({!r})'.format(self.__class__.__name__, self.event)


class SynEvent(object):
    """
    A synchronization event. Synchronization events are used as
    markers to separate event. Used as markers to separate
    events. Events may be separated in time or in space, such as with
    the multitouch protocol.
    """

    __slots__ = 'event'

    def __init__(self, event):
        #: Reference to an :class:`InputEvent` instance.
        self.event = event

    def __str__(self):
        msg = 'synchronization event at {:f}, {} '
        return msg.format(self.event.timestamp(), SynCode(self.event.code))

    def __repr__(self):
        return '{}({!r})'.format(self.__class__.__name__, self.event)


__all__ = ('InputEvent', 'SwitchEvent', 'SynEvent')
